:diffg RE<<<<<<< HEAD
## This file contains all the basic git commands required for using git in software development....



# git --version   => to check git version on your system

# git config --global user.name "your user name"   => this command is used to configure your user name with gitbash

# git config --global user.email "your email"      => this is used to configure your email id on which u will get notification

# git config user.name      => this is used to check ur git user name

# git config user.email     => this is used to check ur registered email id

# git config --list         => this is used to show all  the git configuration on ur system

******************after the above operation now create a local repo folder on ur system ****************************************
***************and then go to that directory , using cd directory path *************************************
*********************************** use this command # git init    => this command initializes basic structure of local repo **********************
******************** after that create some txt file or files to test all the bellow commands *********************************

# touch <filename.extension>  => this is used to create a file in the local repo.. for Ex. touch file1.pdf 




# git status  => this will all the unstaged and staged status of the files 

# git add yourfilename like file.txt   => this command basically adds only one file to the staging area for commit

# git add .  OR git add -A   => this is used to add multiple files to the staging area for commit at a time

# git commit -m "your commit message"  => this is used to commit the changes in the local repo (this command is used after git add command)

# git commit -a -m "your msg"     =>this is used only to commit changes in the local repo only

# git remote -v       => this is used to check whether the local repo is connected to any remote repo or not 

# git remote add origin urremoterepositoryURL  => this command is used to add the local repo to the remote repo 
***************** for Ex. git remote add origin https://github.com/niranjan-madak/Git-Practice.git  ****************************** loacl repo will linked to remote repo Git-Practice now


# git push origin master  => this is used to push files from ur local repo to remote repo

# git push --force origin master  => this is used to push files or changes done in the existing files when there is an error like this [*******! [rejected]        master -> master (non-fast-forward)
error: failed to push some refs to 'git@github.com:asantoya/projectnewbies.git'
To prevent you from losing history, non-fast-forward updates were rejected
Merge the remote changes (e.g. 'git pull') before pushing again.  See the
'Note about fast-forwards' section of 'git push --help' for details.  *************]




# git log    => this command shows all the commit details with description

# git log --oneline  => this command shows all the commit details without description

# git log -1    => this command shows only the latest commit info

# git log -anynumber  => this command shows all number of commits entered the number by you like 4,5,2,9 etc.

# git log --stat  => shows how many or what type of changes are done in the local as well as remote repo

# git log --patch  =>this shows the difference between current commit and previous commit

# git checkout  => this command works like a undo operation , for example if something is wrong with ur file u can simply checkout to come to the previous state (applicable for single file )
# git checkout -f  => applicable for all files

# git diff --staged  => fhow changes with last commit

# git checkout -b <branchname>  =>this command creates new branch on the local repo

# git checkout <branchname>  =>this command switch from one branch to another branch 




*********************** REMOVING FILES FROM LOCAL REPOSITORY *************************************

# git rm <filename with extensiom>  => this command removes files from the local repo

# git rm --cached <filename>   => this command removes files from local repo but not from working tree


***************************RENAMING FILES ******************************

# git mv <old file name> <new file name>  => this command renames files in local repo


# git stash   => this commands adds files to the local repo to work with latter

# git stash list => this shows the stashed files in the local repo


*********************** MERGING OF BRANCHES *************************************************************

 # git merge <branch name>  ==>this command basically merge the requested branch to the current branch , most of the cases it is master branch

 // note if there is not any conflict then merge will be successfull .
// but if there is any conflict in merging then we have to use a merge tool and for that we first of all we configure mergetool 

**********CONFIGURING MERGE TOOL*****************

# git config merge.tool vimdiff
# git config merge.conflictstyle diff3
# git config mergetool.prompt false

**********CONFIGURING MERGE TOOL***************** after configuring the tool run

# git mergetool  ==> this command will provide you the inteface , how to  do further operations----------------

@@@@@@@@@@@ You will see a vimdiff display in following format @@@@@@@@@@@@@@@@@@

  ╔═══════╦══════╦════════╗
  ║       ║      ║        ║
  ║ LOCAL ║ BASE ║ REMOTE ║
  ║       ║      ║        ║
  ╠═══════╩══════╩════════╣
  ║                       ║
  ║        MERGED         ║
  ║                       ║
  ╚═══════════════════════╝

THESE ARE --
LOCAL – this is file from the current branch

BASE – common ancestor, how file looked before both changes

REMOTE – file you are merging into your branch

MERGED – merge result, this is what gets saved in the repo

You can navigate among these views using ctrl+w. You can directly reach MERGED view using ctrl+w followed by j.

@@@@@@@ You could edit the MERGED view the following way(OPTIONAL)

// for doing this type i  => i, will provide the facility to write below something in the editor
 
If you want to get changes from REMOTE

:diffg RE  
If you want to get changes from BASE

:diffg BA  
If you want to get changes from LOCAL

:diffg LO 


@@@@@@@@@@@@@@@@@@AND FINALLY @@@@@@@@@@@@@@@@
Save, Exit, Commit and Clean up

# press esc and write ==>  :wqa      ==> to save and exit from vi   and after that --

# git commit -m "message"  ==> to commit the changes in the local repo

# git clean  ==> this removes  extra files (e.g. *.orig) created by diff tool.
 
=======
all branch merged successfully..
>>>>>>> another-branch

*********************** MERGING OF BRANCHES ************************************************************* Done
